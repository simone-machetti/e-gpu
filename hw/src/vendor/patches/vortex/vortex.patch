diff --git a/hw/rtl/VX_config.vh b/hw/rtl/VX_config.vh
index 8a8e8dcf..5e3ca737 100644
--- a/hw/rtl/VX_config.vh
+++ b/hw/rtl/VX_config.vh
@@ -46,7 +46,7 @@
 `endif
 
 `ifndef STARTUP_ADDR
-`define STARTUP_ADDR 32'h80000000
+`define STARTUP_ADDR 32'h00000000
 `endif
 
 `ifndef IO_BASE_ADDR
diff --git a/hw/rtl/VX_define.vh b/hw/rtl/VX_define.vh
index 2badf7f8..122dc38a 100644
--- a/hw/rtl/VX_define.vh
+++ b/hw/rtl/VX_define.vh
@@ -4,6 +4,8 @@
 `include "VX_platform.vh"
 `include "VX_config.vh"
 
+`define FPU_FPNEW
+
 ///////////////////////////////////////////////////////////////////////////////
 
 `define NW_BITS         `LOG2UP(`NUM_WARPS)
@@ -62,10 +64,10 @@
 
 `define INST_FL         7'b0000111 // float load instruction
 `define INST_FS         7'b0100111 // float store  instruction
-`define INST_FMADD      7'b1000011  
+`define INST_FMADD      7'b1000011
 `define INST_FMSUB      7'b1000111
 `define INST_FNMSUB     7'b1001011
-`define INST_FNMADD     7'b1001111 
+`define INST_FNMADD     7'b1001111
 `define INST_FCI        7'b1010011 // float common instructions
 
 `define INST_GPGPU      7'b1101011
@@ -112,8 +114,8 @@
 
 `define INST_BR_EQ           4'b0000
 `define INST_BR_NE           4'b0010
-`define INST_BR_LTU          4'b0100 
-`define INST_BR_GEU          4'b0110 
+`define INST_BR_LTU          4'b0100
+`define INST_BR_GEU          4'b0110
 `define INST_BR_LT           4'b0101
 `define INST_BR_GE           4'b0111
 `define INST_BR_JAL          4'b1000
@@ -146,12 +148,12 @@
 `define INST_FMT_BU          3'b100
 `define INST_FMT_HU          3'b101
 
-`define INST_LSU_LB          4'b0000 
+`define INST_LSU_LB          4'b0000
 `define INST_LSU_LH          4'b0001
 `define INST_LSU_LW          4'b0010
 `define INST_LSU_LBU         4'b0100
 `define INST_LSU_LHU         4'b0101
-`define INST_LSU_SB          4'b1000 
+`define INST_LSU_SB          4'b1000
 `define INST_LSU_SH          4'b1001
 `define INST_LSU_SW          4'b1010
 `define INST_LSU_BITS        4
@@ -171,26 +173,26 @@
 `define INST_CSR_OTHER       2'h0
 `define INST_CSR_BITS        2
 
-`define INST_FPU_ADD         4'h0 
-`define INST_FPU_SUB         4'h4 
-`define INST_FPU_MUL         4'h8 
+`define INST_FPU_ADD         4'h0
+`define INST_FPU_SUB         4'h4
+`define INST_FPU_MUL         4'h8
 `define INST_FPU_DIV         4'hC
 `define INST_FPU_CVTWS       4'h1  // FCVT.W.S
 `define INST_FPU_CVTWUS      4'h5  // FCVT.WU.S
 `define INST_FPU_CVTSW       4'h9  // FCVT.S.W
 `define INST_FPU_CVTSWU      4'hD  // FCVT.S.WU
 `define INST_FPU_SQRT        4'h2
-`define INST_FPU_CLASS       4'h6  
+`define INST_FPU_CLASS       4'h6
 `define INST_FPU_CMP         4'hA
-`define INST_FPU_MISC        4'hE  // SGNJ, SGNJN, SGNJX, FMIN, FMAX, MVXW, MVWX 
-`define INST_FPU_MADD        4'h3 
-`define INST_FPU_MSUB        4'h7   
-`define INST_FPU_NMSUB       4'hB   
+`define INST_FPU_MISC        4'hE  // SGNJ, SGNJN, SGNJX, FMIN, FMAX, MVXW, MVWX
+`define INST_FPU_MADD        4'h3
+`define INST_FPU_MSUB        4'h7
+`define INST_FPU_NMSUB       4'hB
 `define INST_FPU_NMADD       4'hF
 `define INST_FPU_BITS        4
 
 `define INST_GPU_TMC         4'h0
-`define INST_GPU_WSPAWN      4'h1 
+`define INST_GPU_WSPAWN      4'h1
 `define INST_GPU_SPLIT       4'h2
 `define INST_GPU_JOIN        4'h3
 `define INST_GPU_BAR         4'h4
@@ -261,7 +263,7 @@
 // Block size in bytes
 `define ICACHE_LINE_SIZE        `L1_BLOCK_SIZE
 
-// TAG sharing enable       
+// TAG sharing enable
 `define ICACHE_CORE_TAG_ID_BITS `NW_BITS
 
 // Core request tag bits
@@ -293,12 +295,12 @@
 `define LSU_TAG_ID_BITS         `MAX(`LSUQ_ADDR_BITS, 2)
 `define LSU_TEX_DCACHE_TAG_BITS (`UUID_BITS + `LSU_TAG_ID_BITS + `CACHE_ADDR_TYPE_BITS)
 `define DCACHE_CORE_TAG_ID_BITS (`LSU_TAG_ID_BITS + `CACHE_ADDR_TYPE_BITS + `TEX_TAG_BIT)
-`else 
+`else
 `define LSU_TAG_ID_BITS         `LSUQ_ADDR_BITS
 `define DCACHE_CORE_TAG_ID_BITS (`LSU_TAG_ID_BITS + `CACHE_ADDR_TYPE_BITS)
 `endif
 `define DCACHE_CORE_TAG_WIDTH   (`UUID_BITS + `DCACHE_CORE_TAG_ID_BITS)
- 
+
 // Memory request data bits
 `define DCACHE_MEM_DATA_WIDTH   (`DCACHE_LINE_SIZE * 8)
 
@@ -399,11 +401,11 @@
 
 ///////////////////////////////////////////////////////////////////////////////
 
-`define VX_MEM_BYTEEN_WIDTH     `L3_MEM_BYTEEN_WIDTH   
+`define VX_MEM_BYTEEN_WIDTH     `L3_MEM_BYTEEN_WIDTH
 `define VX_MEM_ADDR_WIDTH       `L3_MEM_ADDR_WIDTH
 `define VX_MEM_DATA_WIDTH       `L3_MEM_DATA_WIDTH
 `define VX_MEM_TAG_WIDTH        `L3_MEM_TAG_WIDTH
-`define VX_CORE_TAG_WIDTH       `L3_CORE_TAG_WIDTH 
+`define VX_CORE_TAG_WIDTH       `L3_CORE_TAG_WIDTH
 `define VX_CSR_ID_WIDTH         `LOG2UP(`NUM_CLUSTERS * `NUM_CORES)
 
 `define TO_FULL_ADDR(x)         {x, (32-$bits(x))'(0)}
diff --git a/hw/rtl/VX_platform.vh b/hw/rtl/VX_platform.vh
index 908428b7..1b751308 100644
--- a/hw/rtl/VX_platform.vh
+++ b/hw/rtl/VX_platform.vh
@@ -1,6 +1,8 @@
 `ifndef VX_PLATFORM
 `define VX_PLATFORM
 
+`define SYNTHESIS
+
 `ifndef SYNTHESIS
 `include "util_dpi.vh"
 `endif
diff --git a/hw/rtl/fp_cores/VX_fpu_define.vh b/hw/rtl/fp_cores/VX_fpu_define.vh
index d764e8e4..356c7762 100644
--- a/hw/rtl/fp_cores/VX_fpu_define.vh
+++ b/hw/rtl/fp_cores/VX_fpu_define.vh
@@ -1,6 +1,8 @@
 `ifndef VX_FPU_DEFINE
 `define VX_FPU_DEFINE
 
+`define SYNTHESIS
+
 `include "VX_define.vh"
 
 `ifndef SYNTHESIS
diff --git a/hw/rtl/tex_unit/VX_tex_addr.sv b/hw/rtl/tex_unit/VX_tex_addr.sv
index 87da9cef..e3bfb5c0 100644
--- a/hw/rtl/tex_unit/VX_tex_addr.sv
+++ b/hw/rtl/tex_unit/VX_tex_addr.sv
@@ -10,29 +10,29 @@ module VX_tex_addr #(
 
     // inputs
 
-    input wire                          req_valid,    
+    input wire                          req_valid,
     input wire [NUM_REQS-1:0]           req_tmask,
-    input wire [1:0][NUM_REQS-1:0][`TEX_FXD_BITS-1:0] req_coords,    
+    input wire [1:0][NUM_REQS-1:0][`TEX_FXD_BITS-1:0] req_coords,
     input wire [`TEX_FORMAT_BITS-1:0]   req_format,
     input wire [`TEX_FILTER_BITS-1:0]   req_filter,
     input wire [1:0][`TEX_WRAP_BITS-1:0] req_wraps,
     input wire [`TEX_ADDR_BITS-1:0]     req_baseaddr,
     input wire [NUM_REQS-1:0][`TEX_LOD_BITS-1:0] mip_level,
-    input wire [NUM_REQS-1:0][`TEX_MIPOFF_BITS-1:0] req_mipoff,    
+    input wire [NUM_REQS-1:0][`TEX_MIPOFF_BITS-1:0] req_mipoff,
     input wire [NUM_REQS-1:0][1:0][`TEX_LOD_BITS-1:0] req_logdims,
-    input wire [REQ_INFOW-1:0]          req_info,    
+    input wire [REQ_INFOW-1:0]          req_info,
     output wire                         req_ready,
 
     // outputs
 
-    output wire                         rsp_valid, 
+    output wire                         rsp_valid,
     output wire [NUM_REQS-1:0]          rsp_tmask,
     output wire [`TEX_FILTER_BITS-1:0]  rsp_filter,
     output wire [`TEX_LGSTRIDE_BITS-1:0] rsp_lgstride,
     output wire [NUM_REQS-1:0][31:0]    rsp_baseaddr,
     output wire [NUM_REQS-1:0][3:0][31:0] rsp_addr,
     output wire [NUM_REQS-1:0][1:0][`TEX_BLEND_FRAC-1:0] rsp_blends,
-    output wire [REQ_INFOW-1:0]         rsp_info,  
+    output wire [REQ_INFOW-1:0]         rsp_info,
     input wire                          rsp_ready
 );
 
@@ -45,8 +45,8 @@ module VX_tex_addr #(
     localparam OFFSET_U_W = `TEX_DIM_BITS + `TEX_LGSTRIDE_MAX;
     localparam OFFSET_V_W = `TEX_DIM_BITS + `TEX_DIM_BITS + `TEX_LGSTRIDE_MAX;
 
-    wire                valid_s0;   
-    wire [NUM_REQS-1:0] tmask_s0; 
+    wire                valid_s0;
+    wire [NUM_REQS-1:0] tmask_s0;
     wire [`TEX_FILTER_BITS-1:0] filter_s0;
     wire [REQ_INFOW-1:0] req_info_s0;
     wire [NUM_REQS-1:0][1:0][`TEX_FXD_FRAC-1:0] clamped_lo, clamped_lo_s0;
@@ -55,11 +55,10 @@ module VX_tex_addr #(
     wire [`TEX_LGSTRIDE_BITS-1:0] log_stride, log_stride_s0;
     wire [NUM_REQS-1:0][31:0] mip_addr, mip_addr_s0;
     wire [NUM_REQS-1:0][PITCH_BITS-1:0] log_pitch, log_pitch_s0;
-    wire [NUM_REQS-1:0][PITCH_BITS-1:0] log_pitch, log_pitch_s0;
-    
+
     wire stall_out;
 
-    // stride   
+    // stride
 
     VX_tex_stride #(
         .CORE_ID (CORE_ID)
@@ -94,7 +93,7 @@ module VX_tex_addr #(
 
             assign dim_shift[i][j] = (`TEX_FXD_FRAC - `TEX_BLEND_FRAC - (req_logdims[i][j] - mip_level[i]));
         end
-        assign log_pitch[i] = PITCH_BITS'(req_logdims[i][0] - mip_level[i]) + PITCH_BITS'(log_stride);        
+        assign log_pitch[i] = PITCH_BITS'(req_logdims[i][0] - mip_level[i]) + PITCH_BITS'(log_stride);
         assign mip_addr[i]  = req_baseaddr + `TEX_ADDR_BITS'(req_mipoff[i]);
     end
 
@@ -108,7 +107,7 @@ module VX_tex_addr #(
         .data_in  ({req_valid, req_tmask, req_filter, log_stride,    req_info,    log_pitch,    dim_shift,    mip_addr,    clamped_lo,    clamped_hi}),
         .data_out ({valid_s0,  tmask_s0,  filter_s0,  log_stride_s0, req_info_s0, log_pitch_s0, dim_shift_s0, mip_addr_s0, clamped_lo_s0, clamped_hi_s0})
     );
-    
+
     // addresses generation
 
     wire [NUM_REQS-1:0][1:0][SCALED_X_W-1:0] scaled_lo;
@@ -121,9 +120,9 @@ module VX_tex_addr #(
     wire [NUM_REQS-1:0][3:0][31:0] addr;
 
     for (genvar i = 0; i < NUM_REQS; ++i) begin
-        for (genvar j = 0; j < 2; ++j) begin  
+        for (genvar j = 0; j < 2; ++j) begin
             assign scaled_lo[i][j] = SCALED_X_W'(clamped_lo_s0[i][j] >> dim_shift_s0[i][j]);
-            assign scaled_hi[i][j] = SCALED_X_W'(clamped_hi_s0[i][j] >> dim_shift_s0[i][j]);          
+            assign scaled_hi[i][j] = SCALED_X_W'(clamped_hi_s0[i][j] >> dim_shift_s0[i][j]);
             assign blends[i][j] = filter_s0 ? scaled_lo[i][j][`TEX_BLEND_FRAC-1:0] : `TEX_BLEND_FRAC'(0);
         end
     end
@@ -131,7 +130,7 @@ module VX_tex_addr #(
     for (genvar i = 0; i < NUM_REQS; ++i) begin
         assign offset_u_lo[i] = OFFSET_U_W'(scaled_lo[i][0][`TEX_BLEND_FRAC +: `TEX_DIM_BITS]) << log_stride_s0;
         assign offset_u_hi[i] = OFFSET_U_W'(scaled_hi[i][0][`TEX_BLEND_FRAC +: `TEX_DIM_BITS]) << log_stride_s0;
-        
+
         assign offset_v_lo[i] = OFFSET_V_W'(scaled_lo[i][1][`TEX_BLEND_FRAC +: `TEX_DIM_BITS]) << log_pitch_s0[i];
         assign offset_v_hi[i] = OFFSET_V_W'(scaled_hi[i][1][`TEX_BLEND_FRAC +: `TEX_DIM_BITS]) << log_pitch_s0[i];
 
@@ -161,17 +160,17 @@ module VX_tex_addr #(
     wire [31:0]         rsp_PC;
 
     assign {rsp_wid, rsp_PC} = rsp_info[`NW_BITS+32-1:0];
-    
+
     always @(posedge clk) begin
         if (req_valid && ~stall_out) begin
-            dpi_trace("%d: *** log_pitch=", $time); 
+            dpi_trace("%d: *** log_pitch=", $time);
             `TRACE_ARRAY1D(log_pitch, NUM_REQS);
             dpi_trace(", mip_addr=");
             `TRACE_ARRAY1D(mip_addr, NUM_REQS);
             dpi_trace(", req_logdims=");
-            `TRACE_ARRAY2D(req_logdims, 2, NUM_REQS);  
+            `TRACE_ARRAY2D(req_logdims, 2, NUM_REQS);
             dpi_trace(", clamped_lo=");
-            `TRACE_ARRAY2D(clamped_lo, 2, NUM_REQS);    
+            `TRACE_ARRAY2D(clamped_lo, 2, NUM_REQS);
             dpi_trace(", clamped_hi=");
             `TRACE_ARRAY2D(clamped_hi, 2, NUM_REQS);
             dpi_trace(", mip_addr=");
@@ -180,14 +179,14 @@ module VX_tex_addr #(
         end
 
         if (valid_s0 && ~stall_out) begin
-            dpi_trace("%d: *** scaled_lo=", $time); 
+            dpi_trace("%d: *** scaled_lo=", $time);
             `TRACE_ARRAY2D(scaled_lo, 2, NUM_REQS);
             dpi_trace(", scaled_hi=");
-            `TRACE_ARRAY2D(scaled_hi, 2, NUM_REQS);  
+            `TRACE_ARRAY2D(scaled_hi, 2, NUM_REQS);
             dpi_trace(", offset_u_lo=");
             `TRACE_ARRAY1D(offset_u_lo, NUM_REQS);
             dpi_trace(", offset_u_hi=");
-            `TRACE_ARRAY1D(offset_u_hi, NUM_REQS);    
+            `TRACE_ARRAY1D(offset_u_hi, NUM_REQS);
             dpi_trace(", offset_v_lo=");
             `TRACE_ARRAY1D(offset_v_lo, NUM_REQS);
             dpi_trace(", offset_v_hi=");
@@ -196,7 +195,7 @@ module VX_tex_addr #(
         end
 
         if (rsp_valid && rsp_ready) begin
-            dpi_trace("%d: core%0d-tex-addr: wid=%0d, PC=%0h, tmask=%b, req_filter=%0d, lgstride=%0d, addr=", 
+            dpi_trace("%d: core%0d-tex-addr: wid=%0d, PC=%0h, tmask=%b, req_filter=%0d, lgstride=%0d, addr=",
                     $time, CORE_ID, rsp_wid, rsp_PC, rsp_tmask, rsp_filter, rsp_lgstride);
             `TRACE_ARRAY2D(rsp_addr, 4, NUM_REQS);
             dpi_trace("\n");
